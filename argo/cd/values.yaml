fullnameOverride: argocd

## ApplicationSet controller
applicationSet:
  enabled: false

## Notifications controller
notifications:
  enabled: false

dex:
  enabled: false

## Argo Configs
configs:
  params:
    server.insecure: true
  cmp:
    create: true
    plugins:
      kustomize-build-with-helm:
        generate:
          command: ["sh", "-c"]
          args: ["kustomize build --enable-helm"]
      envsubst:
        init:
          command: ["sh", "-c"]
          args: ["kustomize build --enable-helm . --load-restrictor LoadRestrictionsNone -o raw-kustomization.yaml"]
        generate:
          command: ["sh", "-c"]
          args: ["envsubst < raw-kustomization.yaml > processed-kustomization.yaml && cp processed-kustomization.yaml /dev/stdout"]
        discover:
          fileName: "kustomization.*"

## Repo Server
repoServer:
  replicas: 1

  volumes:
    - name: cmp-kustomize-build-with-helm
      configMap:
        name: argocd-cmp-cm
    - name: cmp-envsubst
      configMap:
        name: argocd-cmp-cm
    - name: custom-tools
      emptyDir: {}
    - name: cmp-tmp
      emptyDir: {}

  initContainers:
    - name: download-tools
      image: golang:1.21-alpine3.17
      command: [sh, -c]
      args:
        - apk add git && go install github.com/drone/envsubst/cmd/envsubst@v1.0.3 && mv $GOPATH/bin/envsubst /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools

  extraContainers:
    - name: kustomize-build-with-helm
      command:
        - argocd-cmp-server
      image: '{{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}'
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop: [ "ALL" ]
      volumeMounts:
        - name: plugins
          mountPath: /home/argocd/cmp-server/plugins
        - name: cmp-kustomize-build-with-helm
          mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: kustomize-build-with-helm.yaml
        - mountPath: /tmp
          name: cmp-tmp

    - name: envsubst
      command: [/var/run/argocd/argocd-cmp-server]
      image: '{{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}'
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - name: var-files
          mountPath: /var/run/argocd
        - name: plugins
          mountPath: /home/argocd/cmp-server/plugins
        # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: envsubst.yaml
          name: cmp-envsubst
        # Mount tools into "PATH"
        - name: custom-tools
          subPath: envsubst
          mountPath: /usr/local/bin/envsubst
        # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
        # mitigate path traversal attacks.
        - mountPath: /tmp
          name: cmp-tmp

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: monitoring
      additionalLabels:
        release: prometheus-stack

controller:
  # -- The number of application controller pods to run.
  replicas: 1
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: monitoring
      additionalLabels:
        release: prometheus-stack

server:
  # -- The number of server pods to run
  replicas: 1
  ingress:
    enabled: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: monitoring
      additionalLabels:
        release: prometheus-stack
